{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021-projects/","result":{"data":{"site":{"siteMetadata":{"title":"Proven Axiom"}},"markdownRemark":{"id":"230ae78e-c8c4-5383-a3bf-f6bdfa52f830","excerpt":"During the year 2021 I had 2 main side projects, both of which were an excuse to learn and play with Rust (btw, I bought a physical copy of the Rust book, as…","html":"<p>During the year 2021 I had 2 main side projects, both of which were an excuse to learn and play with <a href=\"https://www.rust-lang.org/\">Rust</a> (btw, I bought a physical copy of <a href=\"https://doc.rust-lang.org/book/title-page.html\">the Rust book</a>, as they call it, and it’s great).</p>\n<p>Furthermore, both of these projects are based on books, as we’re going to see.</p>\n<h2>Ray tracing in one Weekend</h2>\n<p>The first project is based on <a href=\"https://raytracing.github.io/\">the Ray tracing in one weekend book</a>. As the name of the book suggests, we incrementally build a Ray tracer in C++, and the project is supposed to keep you busy for one weekend. But instead of using C++, I did the project in Rust. I must confess that it took me several weekends to complete though!</p>\n<p>All in all the project was very fun, and I think it’s a good starting point for learning Rust, and you do not need more than a vague knowledge of C++. Besides, the visual feedback that you get on your code is very rewarding. Here is the image I generated by the end of the book:</p>\n<p><img src=\"https://github.com/vincent-prz/ray_tracer_in_one_weekend/blob/master/images/image.jpg\"></p>\n<ul>\n<li><a href=\"https://github.com/vincent-prz/ray_tracer_in_one_weekend\">My repo for the project</a></li>\n<li><a href=\"https://raytracing.github.io/\">The book link</a></li>\n</ul>\n<p>Note: in the above link, we can see a book series, I only did the first volume, but I might do the others later.</p>\n<h2>Crafting interpreters</h2>\n<p>The second project is based on <a href=\"https://craftinginterpreters.com/\">Crafting interpreters</a>. Another book with an explicit name - it challenges the “reader” to build an interpreter for a Javaesque scripting language (*), in Java. I bought a physical copy of the book, and it’s massive!</p>\n<p>As one can already guess, I exerted myself to use Rust instead of Java. As a side note, using Rust allowed me to skip some paragraphs of the book, indeed the author uses the <a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\">Visitor pattern</a>, which is usually used to compensate the absence of pattern matching facilities. But Rust has pattern matching, so I just used it, and I think it saved me quite some time (and led to slightly cleaner code in my opinion).</p>\n<p>On the other hand I stayed stuck for a long time at some point because I wasn’t aware of some Rust idioms (notably the Rc&#x3C;RefCell<T>> idiom) - I might write about that some day.</p>\n<p>The book provides great explanations and illustrations, and as for RTIOW, I think it is a great vehicle for learning Rust (despite the caveat I expressed above). The book is actually split in 2 parts:</p>\n<ul>\n<li>first building a tree walk interpreter</li>\n<li>then build a full fledged compiler in C, all the way down to machine code (going through Virtual machine code)</li>\n</ul>\n<p>To be frank I have only finished the first part as of today - it’s been very fun and informative!</p>\n<ul>\n<li><a href=\"https://github.com/vincent-prz/rox\">My repo for the project</a></li>\n<li><a href=\"https://craftinginterpreters.com/\">The book link</a></li>\n</ul>","frontmatter":{"title":"2021 side projects","date":"January 01, 2022","description":"Tango with Rust."}},"previous":{"fields":{"slug":"/nand-2-tetris-review/"},"frontmatter":{"title":"Nand 2 Tetris: review"}},"next":null},"pageContext":{"id":"230ae78e-c8c4-5383-a3bf-f6bdfa52f830","previousPostId":"a93d268a-51e9-5ad4-82e4-e5533ae38844","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}