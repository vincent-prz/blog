{"componentChunkName":"component---src-templates-blog-post-js","path":"/rc-checkpoint/","result":{"data":{"site":{"siteMetadata":{"title":"Proven Axiom"}},"markdownRemark":{"id":"d4ce3d82-025b-53f1-9dc4-9f689444b624","excerpt":"This post is a log entry of my first 4 weeks at the Recurse Center (see initial post here). The RC experience So far RC has been a lot of fun. Those first…","html":"<p>This post is a log entry of my first 4 weeks at the <a href=\"https://www.recurse.com/\">Recurse Center</a> (see initial post <a href=\"/rc-goals/\">here</a>).</p>\n<h2>The RC experience</h2>\n<p>So far RC has been a lot of fun. Those first 4 weeks have flown very fast. Finding the right balance between deep solo work and interaction has been one of the most difficult things.</p>\n<p>I particularly appreciate the fact that there regular talk sessions (tech and non non tech). I gave a talk on Deep Work, from the <a href=\"https://www.goodreads.com/book/show/25744928-deep-work\">eponymic book</a>. I was pleasantly surprised by the positive feedback I got from it. By the way, I am trying to apply some rules from the book, I might write a post on this later.</p>\n<p>I also enjoy pair programming with fellow recursers, which proved to be fun, instructive and demanding in terms of focus. Pair programming is made easy by a bot which automatically assigns pairing buddies every day.</p>\n<p>Moreover, there is quite a significant pool of Haskellers in my batch, which I’m quite happy about.</p>\n<p>Lastly, I feel fortunate to have been attending a <a href=\"https://algorave.com/about/\">algorave</a> concert, of which some fellow recursers are adepts.</p>\n<h2>Build your own Lisp</h2>\n<p>I went through 75% of the book, and have built an REPL which can do a bunch of things, you can checkout <a href=\"https://github.com/vincent-prz/build_your_own_lisp\">the Github repository</a> if you’re interested.\n.</p>\n<p>(re) writing C code is very educational, and forced me to pull back concepts from my former student life, namely related to memory management, such as heap vs stack, pointers and friends. Speaking of which, my interpreter currently has some memory leaks (:ninja_face:) which I need to hunt down with Valgrind.</p>\n<p>While the pedagogy of the book is great, I sometimes found myself lost in implementations considerations, with a lack of visibility on the bigger picture. I guess that’s a tradeoff inherent to a book with an implementation perspective.</p>\n<p>I’m thinking about quickly skimming through the remainder of the book, without necesarily implement all the steps, to quickly switch to the next phase of my programming language adventures: implementing a basic lambda calculus interpreter.</p>\n<h2>Building my own programming language: next steps</h2>\n<p>Reading “build your own lisp ” was part of my larger objective to build my own programming language. After reading Build your own Lisp, I feel like I now need to get a more theoretical perspective, and after discussing with fellow recursers, the <a href=\"https://www.goodreads.com/book/show/112252.Types_and_Programming_Languages\">Type and Programming Languages</a> book seems promising. It’s in the RC library, so I don’t even have to buy it!</p>\n<p>In particular, the book quickly covers the construction of a (untyped) lambda calculus interpreter, which seems to be a good next step.</p>\n<h2>Cryptopals</h2>\n<p>I initially planned on doing <a href=\"https://cryptopals.com/\">the Cryptopals problems</a> in Rust (and hence learning it at the same time). I quickly gave up on this plan, as it was taking me too much time. I might want to hack in Rust later in the batch though. For now I ditched Rust in favor of Haskell.</p>\n<p>The problem set turned out to be harder than expected, and I found myself in a deep rabbit hole when doing problem 6.  But by the end of this problem, you have code which is able to break repeating-key XOR (<a href=\"https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher\">Vigenere</a>), which feels super rewarding!</p>\n<h2>Category theory</h2>\n<p>Besides, I joined a study group on category theory. I have been curious about this topic for a while, and taking advantage of the study group was too good of an opportunity to miss.</p>\n<p>The material used for the study group is the book <a href=\"https://www.goodreads.com/book/show/33618151-category-theory-for-programmers\">category theory for programmers</a>. I have been through the first 4~5 chapters, and it’s been a delightful read so far.</p>\n<h2>Cool stuff</h2>\n<p>As a bonus, Here is a list of cool stuff I stumbled upon / learned about during my 4 first RC weeks:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Heisenbug\">Heinsenbug</a></li>\n<li>Quote from <a href=\"dev.stephendiehl.com/fun/index.html\">write you a Haskell</a>: “Writing an industrial strength programming language involves work on the order of hundreds of person-years and is an enormous engineering effort.”</li>\n<li><a href=\"https://www.youtube.com/watch?v=eis11j_iGMs\">Lambda calculus</a> and <a href=\"https://www.youtube.com/watch?v=9T8A89jgeTI\">YCombinator</a>. I was already acquainted to those amazing computer science concepts, but I took some time to tighten my grasp on them.</li>\n<li><a href=\"https://tidalcycles.org/index.php/Welcome\">Tidal cycles</a>. Make music with Haskell!</li>\n<li><a href=\"https://wiki.haskell.org/GHC/Typed_holes\">Typed holes</a>. A super cool Haskell feature which can help you figure out what code to write based on type inference.</li>\n</ul>\n<h2>Final word</h2>\n<p>That’s all I got in store for now. I may write more about my RC adventures.</p>","frontmatter":{"title":"RC - 4 weeks checkpoint","date":"October 25, 2019","description":"RC - 4 weeks checkpoint"}},"previous":{"fields":{"slug":"/rc-goals/"},"frontmatter":{"title":"My learning goals at Recurse Center"}},"next":{"fields":{"slug":"/functor-derivation/"},"frontmatter":{"title":"Understanding Haskell functor derivation with Category Theory"}}},"pageContext":{"id":"d4ce3d82-025b-53f1-9dc4-9f689444b624","previousPostId":"b7e3f579-d393-511c-be62-5234e61a2fc7","nextPostId":"9a3fb52a-addb-5b64-ab97-b3cf92c3301d"}},"staticQueryHashes":["2841359383","3257411868"]}